<Activity mc:Ignorable="sap sap2010" x:Class="DScreen_Report" this:DScreen_Report.endWhenError="False" this:DScreen_Report.isOnOrchest="False" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:mva="clr-namespace:Microsoft.VisualBasic.Activities;assembly=System.Activities" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib" xmlns:this="clr-namespace:" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="mailTo" Type="InArgument(x:String)" />
    <x:Property Name="mailCC" Type="InArgument(x:String)" />
    <x:Property Name="mailSubject" Type="InArgument(x:String)" />
    <x:Property Name="mailBody" Type="InArgument(x:String)" />
    <x:Property Name="endWhenError" Type="InArgument(x:Boolean)" />
    <x:Property Name="isOnOrchest" Type="InArgument(x:Boolean)" />
    <x:Property Name="mailUser" Type="InArgument(x:String)" />
    <x:Property Name="mailPassword" Type="InArgument(x:String)" />
    <x:Property Name="mailDomain" Type="InArgument(x:String)" />
  </x:Members>
  <mva:VisualBasic.Settings>
    <x:Null />
  </mva:VisualBasic.Settings>
  <sap:VirtualizedContainerService.HintSize>1204,1169</sap:VirtualizedContainerService.HintSize>
  <sap2010:WorkflowViewState.IdRef>DDeleteFile_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <scg:List x:TypeArguments="x:String" Capacity="24">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>System.Windows.Forms</x:String>
      <x:String>System.Activities.DynamicUpdate</x:String>
      <x:String>System.Xml.Serialization</x:String>
    </scg:List>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <scg:List x:TypeArguments="AssemblyReference" Capacity="23">
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>PresentationCore</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>System.ValueTuple</AssemblyReference>
      <AssemblyReference>UiPath.Mail</AssemblyReference>
      <AssemblyReference>UiPath.Excel</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>System.Windows.Forms</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Composition</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization</AssemblyReference>
    </scg:List>
  </TextExpression.ReferencesForImplementation>
  <Sequence DisplayName="DScreen_Report" sap:VirtualizedContainerService.HintSize="1214,1004" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <Sequence.Variables>
      <Variable x:TypeArguments="x:String" Name="seqName">
        <Variable.Default>
          <Literal x:TypeArguments="x:String">DScreen_Report</Literal>
        </Variable.Default>
      </Variable>
      <Variable x:TypeArguments="x:Boolean" Name="screenSaveSucc" />
      <Variable x:TypeArguments="x:String" Default="[Environment.CurrentDirectory &amp; &quot;\screenshot\screen_report.jpg&quot;]" Name="screenTempPath" />
    </Sequence.Variables>
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" DisplayName="Invoke DScreenSave workflow" sap:VirtualizedContainerService.HintSize="1172,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_2" UnSafe="False" WorkflowFileName="DearLib\DScreen_Save.xaml">
      <ui:InvokeWorkflowFile.Arguments>
        <InArgument x:TypeArguments="x:Boolean" x:Key="endWhenError">[endWhenError]</InArgument>
        <OutArgument x:TypeArguments="x:Boolean" x:Key="isSucc">[screenSaveSucc]</OutArgument>
        <InArgument x:TypeArguments="x:String" x:Key="savePath">[screenTempPath]</InArgument>
      </ui:InvokeWorkflowFile.Arguments>
    </ui:InvokeWorkflowFile>
    <If Condition="[screenSaveSucc]" sap:VirtualizedContainerService.HintSize="1172,760" sap2010:WorkflowViewState.IdRef="If_7">
      <If.Then>
        <Sequence sap:VirtualizedContainerService.HintSize="793,612" sap2010:WorkflowViewState.IdRef="Sequence_3">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <TryCatch DisplayName="Try Catch" sap:VirtualizedContainerService.HintSize="751,520" sap2010:WorkflowViewState.IdRef="TryCatch_1">
            <TryCatch.Variables>
              <Variable x:TypeArguments="x:String" Name="errMsg" />
            </TryCatch.Variables>
            <TryCatch.Try>
              <If Condition="[isOnOrchest]" sap:VirtualizedContainerService.HintSize="713,293" sap2010:WorkflowViewState.IdRef="If_9">
                <If.Then>
                  <ui:SendExchangeMail ApplicationId="{x:Null}" Bcc="{x:Null}" DirectoryId="{x:Null}" MailMessage="{x:Null}" Name="{x:Null}" Server="{x:Null}" TimeoutMS="{x:Null}" AuthenticationMode="UserNameAndPassword" Body="[If(String.IsNullOrEmpty(mailBody), &quot;&quot;, mailBody)]" Cc="[mailCC]" DisplayName="Send Exchange Mail Message" Domain="[mailDomain]" EmailAutodiscover="[mailUser &amp; &quot;@ais.co.th&quot;]" ExchangeVersion="Exchange2007_SP1" From="[mailUser &amp; &quot;@ais.co.th&quot;]" sap:VirtualizedContainerService.HintSize="334,145" sap2010:WorkflowViewState.IdRef="SendExchangeMail_1" IsBodyHtml="True" IsDraft="False" Password="[mailPassword]" SaveCopy="False" Subject="[If(String.IsNullOrEmpty(mailSubject), &quot;Subject&quot;, mailSubject)]" To="[mailTo]" User="[mailUser]">
                    <ui:SendExchangeMail.Files>
                      <InArgument x:TypeArguments="x:String">[screenTempPath]</InArgument>
                    </ui:SendExchangeMail.Files>
                  </ui:SendExchangeMail>
                </If.Then>
                <If.Else>
                  <ui:SendOutlookMail Account="{x:Null}" Bcc="{x:Null}" Cc="{x:Null}" MailMessage="{x:Null}" TimeoutMS="{x:Null}" Body="[If(String.IsNullOrEmpty(mailBody), &quot;&quot;, mailBody)]" DisplayName="Send Outlook Mail Message" sap:VirtualizedContainerService.HintSize="334,145" sap2010:WorkflowViewState.IdRef="SendOutlookMail_1" IsBodyHtml="True" IsDraft="False" Subject="[If(String.IsNullOrEmpty(mailSubject), &quot;Subject&quot;, mailSubject)]" To="[mailTo]">
                    <ui:SendOutlookMail.Files>
                      <scg:List x:TypeArguments="InArgument(x:String)" Capacity="4">
                        <InArgument x:TypeArguments="x:String">[screenTempPath]</InArgument>
                      </scg:List>
                    </ui:SendOutlookMail.Files>
                  </ui:SendOutlookMail>
                </If.Else>
              </If>
            </TryCatch.Try>
            <TryCatch.Catches>
              <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="717,21" sap2010:WorkflowViewState.IdRef="Catch`1_1">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <ActivityAction x:TypeArguments="s:Exception">
                  <ActivityAction.Argument>
                    <DelegateInArgument x:TypeArguments="s:Exception" Name="e" />
                  </ActivityAction.Argument>
                  <Assign sap:VirtualizedContainerService.HintSize="262,60" sap2010:WorkflowViewState.IdRef="Assign_2">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:String">[errMsg]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:String">[e.Message]</InArgument>
                    </Assign.Value>
                  </Assign>
                </ActivityAction>
              </Catch>
            </TryCatch.Catches>
            <TryCatch.Finally>
              <If Condition="[String.IsNullOrWhiteSpace(errMsg)]" sap:VirtualizedContainerService.HintSize="755,458" sap2010:WorkflowViewState.IdRef="If_8">
                <If.Then>
                  <Sequence sap:VirtualizedContainerService.HintSize="376,310" sap2010:WorkflowViewState.IdRef="Sequence_6">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                    <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="334,91" sap2010:WorkflowViewState.IdRef="LogMessage_4" Level="Info" Message="[&quot;-----------------------------------------------------------------------------------------------&quot; &amp; vbCrLf &amp; seqName &amp; &quot; : (Successfully) : &quot; &amp; vbCrlf &amp; &quot;    Mail To : &quot; &amp; mailTo &amp; vbCrLf &amp; &quot;    Mail CC : &quot; &amp; mailCC &amp; vbCrLf &amp;  &quot;    Mail Subject : &quot; &amp; mailSubject &amp; vbCrLf &amp; &quot;    Mail Screen Path : &quot; &amp; screenTempPath &amp; vbCrLf &amp; &quot;    Mail Body : &quot; &amp; mailBody &amp; vbCrlf &amp; vbCrlf]" />
                    <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" DisplayName="Invoke DDeleteFile workflow" sap:VirtualizedContainerService.HintSize="334,87" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_4" UnSafe="False" WorkflowFileName="DearLib\DDeleteFile.xaml">
                      <ui:InvokeWorkflowFile.Arguments>
                        <InArgument x:TypeArguments="x:String" x:Key="filePath">[screenTempPath]</InArgument>
                        <InArgument x:TypeArguments="x:Boolean" x:Key="endWhenError">False</InArgument>
                        <OutArgument x:TypeArguments="x:Boolean" x:Key="isSucc" />
                      </ui:InvokeWorkflowFile.Arguments>
                    </ui:InvokeWorkflowFile>
                  </Sequence>
                </If.Then>
                <If.Else>
                  <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="334,91" sap2010:WorkflowViewState.IdRef="LogMessage_7" Level="Error" Message="[&quot;-----------------------------------------------------------------------------------------------&quot; &amp; vbCrLf &amp; seqName &amp; &quot; : (Send ScreenMail Failed) : &quot; &amp; vbCrLf &amp; &quot;    Error Message : &quot; &amp; errMsg &amp; vbCrlf &amp; &quot;    Mail To : &quot; &amp; mailTo &amp; vbCrLf &amp; &quot;    Mail CC : &quot; &amp; mailCC &amp; vbCrLf &amp;  &quot;    Mail Subject : &quot; &amp; mailSubject &amp; vbCrLf &amp; &quot;    Mail Screen Path : &quot; &amp; screenTempPath &amp; vbCrLf &amp; &quot;    Mail Body : &quot; &amp; mailBody &amp; vbCrlf &amp; vbCrlf]" />
                </If.Else>
              </If>
            </TryCatch.Finally>
          </TryCatch>
        </Sequence>
      </If.Then>
      <If.Else>
        <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="334,91" sap2010:WorkflowViewState.IdRef="LogMessage_6" Level="Error" Message="[&quot;-----------------------------------------------------------------------------------------------&quot; &amp; vbCrLf &amp; seqName &amp; &quot; (Screen Save Failed) : Skip Send Mail&quot; &amp; vbCrlf &amp; vbCrlf]" />
      </If.Else>
    </If>
  </Sequence>
</Activity>